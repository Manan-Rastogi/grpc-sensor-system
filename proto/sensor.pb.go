// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.3
// source: proto/sensor.proto

package sensor

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message send from Client to Server
type SensorData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Temperature   float32                `protobuf:"fixed32,2,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Timestamp     int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorData) Reset() {
	*x = SensorData{}
	mi := &file_proto_sensor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorData) ProtoMessage() {}

func (x *SensorData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sensor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorData.ProtoReflect.Descriptor instead.
func (*SensorData) Descriptor() ([]byte, []int) {
	return file_proto_sensor_proto_rawDescGZIP(), []int{0}
}

func (x *SensorData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SensorData) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *SensorData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Server Response
type ServerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerResponse) Reset() {
	*x = ServerResponse{}
	mi := &file_proto_sensor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerResponse) ProtoMessage() {}

func (x *ServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sensor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerResponse.ProtoReflect.Descriptor instead.
func (*ServerResponse) Descriptor() ([]byte, []int) {
	return file_proto_sensor_proto_rawDescGZIP(), []int{1}
}

func (x *ServerResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_proto_sensor_proto protoreflect.FileDescriptor

const file_proto_sensor_proto_rawDesc = "" +
	"\n" +
	"\x12proto/sensor.proto\x12\x06sensor\"\\\n" +
	"\n" +
	"SensorData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12 \n" +
	"\vtemperature\x18\x02 \x01(\x02R\vtemperature\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\"(\n" +
	"\x0eServerResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status2M\n" +
	"\rSensorService\x12<\n" +
	"\x0eSendSensorData\x12\x12.sensor.SensorData\x1a\x16.sensor.ServerResponseB\x10Z\x0e./proto;sensorb\x06proto3"

var (
	file_proto_sensor_proto_rawDescOnce sync.Once
	file_proto_sensor_proto_rawDescData []byte
)

func file_proto_sensor_proto_rawDescGZIP() []byte {
	file_proto_sensor_proto_rawDescOnce.Do(func() {
		file_proto_sensor_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_sensor_proto_rawDesc), len(file_proto_sensor_proto_rawDesc)))
	})
	return file_proto_sensor_proto_rawDescData
}

var file_proto_sensor_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_sensor_proto_goTypes = []any{
	(*SensorData)(nil),     // 0: sensor.SensorData
	(*ServerResponse)(nil), // 1: sensor.ServerResponse
}
var file_proto_sensor_proto_depIdxs = []int32{
	0, // 0: sensor.SensorService.SendSensorData:input_type -> sensor.SensorData
	1, // 1: sensor.SensorService.SendSensorData:output_type -> sensor.ServerResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_sensor_proto_init() }
func file_proto_sensor_proto_init() {
	if File_proto_sensor_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_sensor_proto_rawDesc), len(file_proto_sensor_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_sensor_proto_goTypes,
		DependencyIndexes: file_proto_sensor_proto_depIdxs,
		MessageInfos:      file_proto_sensor_proto_msgTypes,
	}.Build()
	File_proto_sensor_proto = out.File
	file_proto_sensor_proto_goTypes = nil
	file_proto_sensor_proto_depIdxs = nil
}
